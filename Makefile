CC = gcc
# skip '-ltoml' since './include/toml.h' is locally defined
CFLAGS = -std=c11 -Wall -fcommon -I./include
MFLAGS = -std=c11 -Wall

DEBUG = -ggdb3

SECURITY = -fstack-protector-all -Wstack-protector -D_FORTIFY_SOURCE=2 -Wformat-security -Wl,-z,relro

SRCDIR = src
BINDIR = bin
OBJDIR = obj

MODDIR = modules
MODSRCDIR = $(MODDIR)/src
MODBINDIR = $(MODDIR)/bin
MODOBJDIR = $(MODDIR)/obj

# list of .c files in SRCDIR directory
# this is concurrent to "ls $(SRCDIR)/*.c" and storing
# the output of each listing (.c file) into an array of strings
# each being a file within the targeted directory structure
# this retrieves a list of source files (.c) in src/ or $SRCDIR
# for BRIGHTSTAR to be built successfully a SRCDIR and OBJDIR directory must
# be supplemented within 'Makefile' before calling 'make'
SRC = $(wildcard $(SRCDIR)/*.c)
MODULES = $(wildcard $(MODSRCDIR)/*.c)

# pattern substitution
# src/main.c -> obj/main.o
# - converts all (substitutes) .c files into their appropriate .o extensions
# Ex: main.c -> main.obj
#     invoke.c -> invoke.obj

# transform SRCDIR/*.c (src) -> OBJDIR/*.o (obj)
# have a srcdir $SRCDIR which holds all of the programs actual
# '.c' source statements. Then have a objdir $OBJDIR which holds
# the source files generated by gcc
# for each source file in src/ generate an object file in obj/
# after all files have been iterated through by the gcc command sent to stdout when calling 'make clean && make'
OBJ = $(SRC:$(SRCDIR)/%.c=$(OBJDIR)/%.o)
MODOBJ = $(MODULES:$(MODSRCDIR)/%.c=$(MODOBJDIR)/%.o)

TARGET = $(BINDIR)/BRIGHTSTAR
MODTARGET = $(MODBINDIR)/httpu-discovery.mod

# specifies that TARGET depends on OBJ
# final executable

# you must specify -fPIE ONLY at the executable stage of your build process
$(TARGET):$(OBJ)
	$(CC) $(SECURITY) $^ -fPIE -o $@ -lreadline

# $@ = TARGET/output file, $^ = OBJ files

$(MODTARGET):$(MODOBJ)
	$(CC) $^ -fPIE -o $@

# -c = do not run the linker, yet instead supply target object files (.obj)
# each translation unit (.obj (object) file) must have the -pie argument appended to it when
# calling gcc in the build process

build: $(TARGET)
modbuild: $(MODTARGET)

# transform each .c file from src/ into a .o obj file inside of obj/
object: $(OBJ)
modobject: $(MODOBJ)

$(OBJDIR)/%.o: $(SRCDIR)/%.c
	$(CC) $(CFLAGS) -pie -c $< -o $@

$(MODOBJDIR)/%.o: $(MODSRCDIR)/%.c 
	$(CC) $(MFLAGS) -c $< -o $@

# $< = source file, $@ = output file (obj file)

clean:
	rm -f $(OBJ) $(TARGET)
	rm -f $(MODOBJ) $(MODTARGET)